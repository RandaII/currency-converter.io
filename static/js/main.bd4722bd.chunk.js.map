{"version":3,"sources":["actions/index.js","utils/index.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/error-boundary/index.js","components/error-boundary/error-boudary.js","components/converter-input-field/index.js","components/converter-input-field/converter-input-field.js","components/selector-button/index.js","components/selector-button/selector-button.js","components/currency-list/index.js","components/currency-list/currency-list.js","components/currencies-selection/currencies-selection.js","components/currencies-selection/index.js","components/converter-row/converter-row.js","components/converter-row/index.js","components/converter-view/index.js","components/converter-view/converter-view.js","components/converter/converter.js","components/converter/index.js","components/spinner/index.js","components/spinner/spinner.js","components/currencies-table-body/index.js","components/currencies-table-body/currencies-table-body.js","components/currencies-table-view/index.js","components/currencies-table-view/currencies-table-view.js","components/currencies-table/currencies-table.js","components/currencies-table/index.js","components/switch-buttons/index.js","components/switch-buttons/switch-buttons.js","components/app/app.js","reducers/converter.js","reducers/currencies-table.js","services/currency-test-pair-service.js","reducers/index.js","store.js","index.js"],"names":["setListStatus","payload","type","returnRoundValue","value","toFixed","returnAnotherFieldType","PropTypes","string","number","listDisablerHandler","evt","status","dataType","func","key","target","getAttribute","returnConvertedValue","exchangeRate","ErrorIndicator","className","ErrorBoundary","state","hasError","this","setState","props","children","Component","ConverterInputField","onInputChange","currencyValue","clearInput","onChange","match","index","indexOf","slice","length","commaIndex","returnCheckedValue","maxLength","onClick","onKeyDown","tabIndex","SelectorButton","classNames","data-element-type","CurrencyList","handler","dataset","elementType","elementValue","map","data-element-value","CurrenciesSelection","toggleHandler","activeStatus","currency","currencyList","currencyListClickHandler","Transition","in","timeout","mountOnEnter","unmountOnExit","mapDispatchToProps","addCurrencyValue","setCurrency","ConverterRow","connect","converter","current","converted","listsStatus","fetch","anotherType","sendCurrency","a","ConverterView","rowTypes","id","Converter","error","message","onError","err","listDisabler","fetchCurrenciesInfo","currencyPairService","fetchPairValue","currentCurrency","convertedCurrency","pair","getCourse","then","catch","document","addEventListener","removeEventListener","errorStatus","Spinner","CurrenciesTableBody","Object","entries","i","CurrenciesTableView","headerValues","bodyValues","CurrenciesTable","_INITIAL_STATE","isLoading","spinnerClassname","tableHeaderValues","toggle","setCurrencyInTable","addAllCourses","currenciesTable","addCurrenciesValues","getAllCourses","tableComponent","values","tableData","SwitchButtons","to","activeClassName","exact","App","path","component","CurrenciesList","initialState","updateConverter","action","currentValue","convertedValue","anotherValue","updateCurrenciesTable","returnPairCourse","pairs","response","data","USDRUB","RUBUSD","USDEUR","EURUSD","USDGBP","GBPUSD","USDBYN","BYNUSD","RUBEUR","EURRUB","RUBGBP","GBPRUB","RUBBYN","BYNRUB","EURGBP","GBPEUR","EURBYN","BYNEUR","GBPBYN","BYNGBP","Promise","resolve","setTimeout","_errorHandler","Error","pairsArray","item","pairArray","currencyPairs","result","returnAllPairs","Number","reducer","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bd4722bd.chunk.js","sourcesContent":["// payload массив из двух обменных значений валют - [current, converted]\r\nconst fetchPairValue = (payload) =>({\r\n    type: `FETCH_PAIR_VALUE`,\r\n    payload\r\n});\r\n\r\n// payload объект со свойствами type (current или converted поле) и value {type, value}\r\nconst addCurrencyValue = (payload) =>({\r\n    type: `ADD_CURRENCY_VALUE`,\r\n    payload\r\n});\r\n\r\n// payload объект со свойствами type (current или converted поле) и value (название валюты - USD и т.п.) {type, value}\r\nconst setCurrency = (value) =>({\r\n  type: `SET_CURRENCY`,\r\n  payload: value\r\n});\r\n\r\n// payload объект со свойством current или converted и булевым значением {current || converted}\r\nconst setListStatus = (payload) =>({\r\n  type: `SET_LIST_STATUS`,\r\n  payload\r\n});\r\n\r\n// payload объект c валютными парами вида: {pairName: numberValue}\r\nconst addCurrenciesValues = (payload) =>({\r\n    type: `ADD_CURRENCIES_VALUES`,\r\n    payload\r\n});\r\n\r\n// payload строка с названием валюты - USD, GBP и т.п.\r\nconst setCurrencyInTable = (payload) =>({\r\n    type: `SET_CURRENCY_IN_TABLE`,\r\n    payload\r\n});\r\n\r\nexport {\r\n  fetchPairValue,\r\n  addCurrencyValue,\r\n  setCurrency,\r\n  setListStatus,\r\n  addCurrenciesValues,\r\n  setCurrencyInTable\r\n}","import PropTypes from \"prop-types\";\r\n\r\n// проверяем значение на запрещенные символы и преобразует\r\nconst returnCheckedValue = (value) =>{\r\n\r\n  const numberRegExp = /^\\.|^,|[^\\d.,]|[.,]\\d+[.,]|([.,]{2})/gm;\r\n\r\n  // проверяем значение на ввод иных символов, кроме чисел, точки и запятой, (а также дублирования точки/запятой) в случае их присутствия, обрезаем строку до прежнего состояния\r\n  const match = value.match(numberRegExp)?.[0];\r\n  if (match){\r\n    const index = value.indexOf(match);\r\n    value = value.slice(0, index) + value.slice(index + 1);\r\n  }\r\n\r\n  // проверяем, что после нуля не идет целое число, и срезаем 0 в случае целого числа, а не точки)\r\n\r\n  if (value[0] === `0` && value.length > 1 && value[1] !== `.`){\r\n    value = value.slice(1);\r\n  }\r\n\r\n  // конвертация запятой в точку\r\n  const commaIndex = value.indexOf(`,`);\r\n\r\n  if (commaIndex !== -1){\r\n    value = value.slice(0, commaIndex) + `.` + value.slice(commaIndex + 1);\r\n  }\r\n  return value;\r\n}\r\n\r\n// возвращает, особым образом округленное значение\r\nconst returnRoundValue = (value) =>{\r\n  // функция для возврата округленного значения\r\n  if (value >= 0.1){\r\n    return +value.toFixed(2);\r\n  }\r\n  else if (value < 0.1 && value > 0){\r\n    return +value.toFixed(3)\r\n  }\r\n  else if (value === 0){\r\n    return 0;\r\n  }\r\n}\r\n\r\nconst PropTypesTemplates = {\r\n\r\n  stringWithNumber: [\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ],\r\n\r\n  currenciesArray: [\r\n    `RUB`,\r\n    `USD`,\r\n    `EUR`,\r\n    `GBP`,\r\n    `BYN`\r\n  ],\r\n}\r\n\r\n// возвращает другой тип поля для конвертера\r\nconst returnAnotherFieldType = (value) => (value === `current`) ? `converted` : `current`;\r\n\r\n// общий handler для выключения currency-list\r\nconst listDisablerHandler = (evt, status, dataType, func) =>{\r\n  // срабатывает при true статусе, по клику или нажатию клавиши таб\r\n  if (status &&\r\n    (evt.type === `click` ||\r\n    evt.key === `Tab`)){\r\n\r\n    const attributeValue = evt.target.getAttribute(`data-element-type`);\r\n    // если нет необходимого значения атрибута, вызываем disable функцию\r\n    if (attributeValue !== dataType) {func();}\r\n  }\r\n}\r\n\r\n// функция для возрата сконвертированного значения\r\nconst returnConvertedValue = (value, exchangeRate) =>\r\n    value ? returnRoundValue(+value * exchangeRate) : ``;\r\n\r\nexport {\r\n  returnCheckedValue,\r\n  returnRoundValue,\r\n  returnAnotherFieldType,\r\n  returnConvertedValue,\r\n  PropTypesTemplates,\r\n  listDisablerHandler\r\n}","import ErrorIndicator from \"./error-indicator\";\r\nexport default ErrorIndicator;","import \"./error-indicator.scss\";\r\n\r\nconst ErrorIndicator = () =>{\r\n  return(\r\n    <div className=\"error-indicator\">\r\n      <p>Что-то пошло не так</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorIndicator","import ErrorBoundary from \"./error-boudary\";\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nexport default class ErrorBoundary extends Component{\r\n\r\n  state = {\r\n    hasError: false\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n    return (this.state.hasError) ? <ErrorIndicator/> : this.props.children;\r\n  }\r\n}","import ConverterInputField from \"./converter-input-field\";\r\n\r\nexport default ConverterInputField;","import React from 'react';\r\nimport {PropTypesTemplates as Templates, returnCheckedValue} from \"../../utils\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./converter-input-field.scss\"\r\n\r\nconst ConverterInputField = ({onInputChange, type, currencyValue}) => {\r\n\r\n  const onchange = ({target: {value}}) => {\r\n    //проверяем поступившее значение на недопустимые символы и делаем еще несколько проверок, после чего переприсваеваем\r\n    value = returnCheckedValue(value);\r\n\r\n    // в случае, если значение после проверки изменилось, отправляем его в store\r\n    if (value !== currencyValue){\r\n      onInputChange({\r\n        type,\r\n        value\r\n      });\r\n    }\r\n  }\r\n\r\n  // очистка input\r\n  const clearInput = () => onInputChange({\r\n    type,\r\n    value: ``\r\n  });\r\n\r\n  // обработчик для управления с клавиатуры\r\n  const clearInputOnKeyDown = ({key}) =>{\r\n    if (key === `Enter`){clearInput();}\r\n  }\r\n\r\n  return (\r\n    <div className=\"converter__input-block\">\r\n      <input type=\"text\"\r\n             value={currencyValue}\r\n             onChange={onchange}\r\n             maxLength={15}/>\r\n      <span onClick={clearInput} onKeyDown={clearInputOnKeyDown} className=\"converter__input-clear\" tabIndex=\"0\">&#215;</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nConverterInputField.propTypes = {\r\n  onInputChange: PropTypes.func.isRequired,\r\n  currencyValue: PropTypes.oneOfType(Templates.stringWithNumber).isRequired,\r\n  type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ConverterInputField;","import SelectorButton from \"./selector-button\";\r\nexport default SelectorButton;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./selector-button.scss\";\r\n\r\nconst SelectorButton = ({dataType = \"\", onClick, children, classNames = \"\"}) =>(\r\n    <button\r\n      data-element-type={dataType}\r\n      className={ `selected-currency-button ${classNames}`}\r\n      onClick={onClick}>\r\n        {children}\r\n      <i className=\"fa--converter fa fa-angle-down\"\r\n         data-element-type={dataType}></i>\r\n    </button>);\r\n\r\nSelectorButton.propTypes = {\r\n  dataType: PropTypes.string,\r\n  classNames: PropTypes.string,\r\n  children: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SelectorButton;","import CurrencyList from \"./currency-list\";\r\nexport default CurrencyList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./currency-list.scss\";\r\n\r\nconst CurrencyList = ({children, classNames = \"\", dataType = \"\", onClick = () =>{}}) => {\r\n  // общий handler для ввода с клавиатуры/мыши, в случае соответствия dataType\r\n  const handler = (evt) =>{\r\n    if (evt.target.dataset.elementType === dataType){\r\n      if (evt.key === `Enter` || evt.type === `click`){\r\n        onClick(evt.target.dataset.elementValue);\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <ul className={`currency-list ${classNames}`} onKeyDown={handler} onClick={handler}>\r\n      {children.map((value, index) =>\r\n        <li className=\"currency-list-item\"\r\n            key={index}\r\n            data-element-type={dataType}\r\n            data-element-value={value}\r\n            tabIndex=\"0\">{value}\r\n        </li>)}\r\n    </ul>);\r\n}\r\n\r\nCurrencyList.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n  classNames: PropTypes.string,\r\n  dataType: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default CurrencyList;","import React from 'react';\r\nimport SelectorButton from \"../selector-button\";\r\nimport CurrencyList from \"../currency-list\";\r\nimport PropTypes from \"prop-types\";\r\nimport {PropTypesTemplates as Templates} from \"../../utils\";\r\nimport {Transition} from \"react-transition-group\";\r\n\r\nimport \"./currencies-selection.scss\";\r\n// компонет выбора валюты, передает пропсы и отвечает за анимацию вложенных компонентов\r\nconst CurrenciesSelection = (\r\n  {dataType, toggleHandler, activeStatus, currency, currencyList, currencyListClickHandler = () =>{}}) =>(\r\n    <div className=\"converter__currency-type-block\">\r\n      <Transition\r\n        in={activeStatus}\r\n        timeout={200}>\r\n          {(state) =>(\r\n              <SelectorButton\r\n                dataType={dataType}\r\n                onClick={toggleHandler}\r\n                classNames={state}>\r\n                  {currency}\r\n              </SelectorButton>)}\r\n      </Transition>\r\n\r\n      <Transition\r\n        in={activeStatus}\r\n        timeout={200}\r\n        mountOnEnter\r\n        unmountOnExit>\r\n          {(state) =>(\r\n            <CurrencyList\r\n              dataType={dataType}\r\n              classNames={state}\r\n              onClick={currencyListClickHandler}>\r\n                {currencyList}\r\n            </CurrencyList>)}\r\n      </Transition>\r\n    </div>);\r\n\r\nCurrenciesSelection.propTypes = {\r\n  dataType: PropTypes.string.isRequired,\r\n  toggleHandler: PropTypes.func.isRequired,\r\n  activeStatus: PropTypes.bool.isRequired,\r\n  currency: PropTypes.oneOf(Templates.currenciesArray).isRequired,\r\n  currencyList: PropTypes.array.isRequired,\r\n  currencyListClickHandler: PropTypes.func\r\n};\r\n\r\nexport default CurrenciesSelection;","import CurrenciesSelection from \"./currencies-selection\";\r\n\r\nexport default CurrenciesSelection;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport ConverterInputField from \"../converter-input-field\";\r\nimport CurrenciesSelection from \"../currencies-selection\";\r\nimport {addCurrencyValue, setListStatus, setCurrency} from \"../../actions\";\r\nimport \"./converter-row.scss\";\r\nimport {PropTypesTemplates as Templates, returnAnotherFieldType} from \"../../utils\";\r\n\r\nconst ConverterRow  = (props) =>{\r\n  const {type, converter, setListStatus, setCurrency, fetch, addCurrencyValue, currencyList} = props;\r\n\r\n  // переключатель currency-list\r\n  const toggleHandler = () => {\r\n\r\n    // получаем тип другого currency-list\r\n    let anotherType = returnAnotherFieldType(type);\r\n\r\n    // меняем состояние текущего currency-list на противоположное, для другого currency-list, состояние ставим в false\r\n\r\n    let payload = { [type]: !converter.listsStatus[type] };\r\n\r\n    if (converter.listsStatus[anotherType]){\r\n      payload[anotherType] = false;\r\n    }\r\n\r\n    setListStatus(payload);\r\n  }\r\n\r\n  // отправляем выбранную валюту, получаем обновленные данные для новой валютной пары, скрываем currency-list\r\n  const sendCurrency = async (value) => {\r\n    await setCurrency({type, value});\r\n    await fetch();\r\n    toggleHandler();\r\n  }\r\n\r\n  // при вводе в input-field, функция отправит новое значение в store\r\n  const onInputChange = (value) => addCurrencyValue(value);\r\n\r\n  return (\r\n    <div className=\"converter__currency-block\">\r\n\r\n      <ConverterInputField\r\n        onInputChange={onInputChange}\r\n        currencyValue={converter[type].value}\r\n        type={type}/>\r\n\r\n      <CurrenciesSelection\r\n        dataType={converter.dataType}\r\n        toggleHandler={toggleHandler}\r\n        activeStatus={converter.listsStatus[type]}\r\n        currency={converter[type].currency}\r\n        currencyList={currencyList}\r\n        currencyListClickHandler={sendCurrency}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nConverterRow.propTypes = {\r\n  addCurrencyValue: PropTypes.func.isRequired,\r\n  setListStatus: PropTypes.func.isRequired,\r\n  setCurrency: PropTypes.func.isRequired,\r\n  fetch: PropTypes.func.isRequired,\r\n  converter: PropTypes.shape({\r\n    converted: PropTypes.shape({\r\n      currency: PropTypes.oneOf(Templates.currenciesArray).isRequired,\r\n      value: PropTypes.oneOfType(Templates.stringWithNumber).isRequired\r\n    }).isRequired,\r\n    current: PropTypes.shape({\r\n      currency: PropTypes.oneOf(Templates.currenciesArray).isRequired,\r\n      value: PropTypes.oneOfType(Templates.stringWithNumber).isRequired\r\n    }).isRequired,\r\n    dataType: PropTypes.string.isRequired,\r\n    listsStatus: PropTypes.shape({\r\n      current: PropTypes.bool.isRequired,\r\n      converted: PropTypes.bool.isRequired,\r\n    }).isRequired\r\n  }).isRequired,\r\n  currencyList: PropTypes.array.isRequired,\r\n  type: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = ({converter, currencyList}) =>(\r\n  {converter:{\r\n      current:{\r\n        value: converter.current.value,\r\n        currency: converter.current.currency\r\n      },\r\n      converted:{\r\n        value: converter.converted.value,\r\n        currency: converter.converted.currency\r\n      },\r\n      dataType: converter.dataType,\r\n      listsStatus: converter.listsStatus\r\n    },\r\n  currencyList});\r\n\r\nconst mapDispatchToProps ={\r\n    addCurrencyValue,\r\n    setListStatus,\r\n    setCurrency\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConverterRow);","import ConverterRow from \"./converter-row\";\r\nexport default ConverterRow;","import ConverterView from \"./converter-view\";\r\nexport default ConverterView;","import React from \"react\";\r\nimport ConverterRow from \"../converter-row\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./converter-view.scss\";\r\n\r\nconst ConverterView = ({rowTypes, fetch}) =>(\r\n    <main className=\"converter\">\r\n      <div className=\"converter__wrapper\">\r\n        {\r\n          rowTypes.map(({id, type}) =>(\r\n            <ConverterRow key={id} type={type} fetch={fetch}/>\r\n          ))\r\n        }\r\n      </div>\r\n    </main>\r\n  );\r\n\r\nConverterView.propTypes = {\r\n  rowTypes: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    type: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  fetch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ConverterView;","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {fetchPairValue, setListStatus} from \"../../actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport {PropTypesTemplates as Templates, listDisablerHandler} from \"../../utils\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport ErrorBoundary from \"../error-boundary\";\r\nimport ConverterView from \"../converter-view\";\r\n\r\nclass Converter extends Component {\r\n\r\n  static propTypes = {\r\n    converter: PropTypes.shape({\r\n      converted: PropTypes.shape({\r\n        currency: PropTypes.oneOf(Templates.currenciesArray).isRequired\r\n      }).isRequired,\r\n      current: PropTypes.shape({\r\n        currency: PropTypes.oneOf(Templates.currenciesArray).isRequired\r\n      }).isRequired,\r\n      dataType: PropTypes.string.isRequired,\r\n      listsStatus: PropTypes.shape({\r\n        current: PropTypes.bool.isRequired,\r\n        converted: PropTypes.bool.isRequired,\r\n      }).isRequired\r\n    }),\r\n    currencyPairService: PropTypes.object.isRequired,\r\n    fetchPairValue: PropTypes.func.isRequired,\r\n    setListStatus: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    error: {\r\n      status: false,\r\n      message: null\r\n    }\r\n  }\r\n\r\n  // функция вызываемая при возникновении ошибки\r\n  onError = (err) => {\r\n    this.setState({\r\n      error: {\r\n        status: true,\r\n        message: err.message\r\n      }\r\n    });\r\n    throw err;\r\n  }\r\n\r\n  // Типы для row компонентов\r\n  rowTypes = [\r\n    {id:0, type:`current`},\r\n    {id:1, type:`converted`}\r\n  ];\r\n\r\n  // listener отслеживает клики, при любом активном currency-list, при клике, вне окна, или же при смене фокуса на элемент без необходимого dataType, меняет состояние на false\r\n  listDisabler = (evt) =>{\r\n    const {dataType, listsStatus:{current, converted}} = this.props.converter;\r\n    const activeStatus = current || converted;\r\n    const func = () =>\r\n        this.props.setListStatus({\r\n          current: false,\r\n          converted: false\r\n        });\r\n    // для проверки соблюдения условий, используется общий handler\r\n    listDisablerHandler(evt, activeStatus, dataType, func);\r\n  }\r\n\r\n  // получение data по валютной паре, и отправка ее в store\r\n  fetchCurrenciesInfo = async () => {\r\n    const {\r\n      currencyPairService,\r\n      fetchPairValue,\r\n      converter: {\r\n        current:{currency: currentCurrency},\r\n        converted:{currency: convertedCurrency}\r\n      }\r\n    } = this.props;\r\n\r\n    // образуем ключи текущей пары\r\n    const pair = [currentCurrency + convertedCurrency, convertedCurrency + currentCurrency];\r\n\r\n    // получаем курс текущей пары\r\n    currencyPairService.getCourse(pair)\r\n      // отправляем значение в store\r\n      .then(fetchPairValue)\r\n      .catch(this.onError);\r\n  }\r\n\r\n  // после монтирования получаем текущий курс и назначаем обработчики\r\n  componentDidMount() {\r\n    this.fetchCurrenciesInfo();\r\n    document.addEventListener(`click`, this.listDisabler);\r\n    document.addEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(`click`, this.listDisabler);\r\n    document.removeEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {status: errorStatus} = this.state.error;\r\n\r\n    // в зависимости от статуса, показываем нужный компонент\r\n    return (\r\n      <ErrorBoundary>\r\n        {(errorStatus && <ErrorIndicator/>) ||\r\n        <ConverterView\r\n          rowTypes={this.rowTypes}\r\n          fetch={this.fetchCurrenciesInfo}/>}\r\n      </ErrorBoundary>);\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {fetchPairValue, setListStatus};\r\n\r\nconst mapStateToProps = ({converter, currencyPairService}) => ({converter:{\r\n    current: {currency:converter.current.currency},\r\n    converted: {currency:converter.converted.currency},\r\n    dataType: converter.dataType,\r\n    listsStatus: converter.listsStatus\r\n  },\r\n  currencyPairService});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Converter);","import Converter from \"./converter\";\r\n\r\nexport default Converter;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React from \"react\";\r\nimport \"./spinner.scss\";\r\n\r\nconst Spinner = ({children}) =>(\r\n    <div className= {`spinner ${children}`}>\r\n      <div className=\"loadingio-spinner-eclipse-p19pnm2p23\">\r\n        <div className=\"ldio-pnzr8yywkb\">\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    </div>);\r\n\r\nexport default Spinner;","import CurrenciesTableBody from \"./currencies-table-body\";\r\nexport default CurrenciesTableBody;","import React from \"react\";\r\nimport Proptypes from \"prop-types\";\r\n\r\nconst CurrenciesTableBody = ({children}) =>(\r\n  <tbody>\r\n    {\r\n      Object.entries(children).map(([pair, value], i) =>(\r\n        <tr className=\"currency-table__row\" key={i}>\r\n          <td>{pair.slice(0,3)}/{pair.slice(3)}</td>\r\n          <td>{value}</td>\r\n        </tr>))\r\n    }\r\n  </tbody>);\r\n\r\nCurrenciesTableBody.propTypes = {\r\n  children: Proptypes.object.isRequired\r\n}\r\n\r\nexport default CurrenciesTableBody","import CurrenciesTableView from \"./currencies-table-view\";\r\nexport default CurrenciesTableView;","import React from \"react\";\r\nimport CurrenciesTableBody from \"../currencies-table-body\";\r\nimport Proptypes from \"prop-types\";\r\nimport \"./currencies-table-view.scss\";\r\n\r\nconst CurrenciesTableView = ({children:{headerValues, bodyValues}}) =>(\r\n  <div className=\"currency-table__wrapper\">\r\n    <table className=\"currency-table\">\r\n      <thead>\r\n      <tr className=\"currency-table__row\">\r\n        {headerValues.map(({id, value}) => <th key={id}>{value}</th>)}\r\n      </tr>\r\n      </thead>\r\n      <CurrenciesTableBody>{bodyValues}</CurrenciesTableBody>\r\n    </table>\r\n  </div>);\r\n\r\nCurrenciesTableView.propTypes = {\r\n  children: Proptypes.shape({\r\n    headerValues: Proptypes.arrayOf(Proptypes.shape({\r\n      id: Proptypes.number.isRequired,\r\n      value: Proptypes.string.isRequired\r\n    })).isRequired,\r\n    bodyValues: Proptypes.object.isRequired\r\n  }).isRequired\r\n}\r\n\r\nexport default CurrenciesTableView;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addCurrenciesValues, setCurrencyInTable} from \"../../actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../error-boundary\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport CurrenciesSelection from \"../currencies-selection/currencies-selection\";\r\nimport CurrenciesTableView from \"../currencies-table-view\";\r\nimport {listDisablerHandler} from \"../../utils\";\r\n\r\nclass CurrenciesTable extends Component {\r\n\r\n  static propTypes = {\r\n    addCurrenciesValues: PropTypes.func.isRequired,\r\n    setCurrencyInTable: PropTypes.func.isRequired,\r\n    currencyList: PropTypes.array.isRequired,\r\n    currencyPairService: PropTypes.object.isRequired,\r\n    currenciesTable: PropTypes.shape({\r\n      currentCurrency: PropTypes.string.isRequired,\r\n      values: PropTypes.object.isRequired,\r\n      dataType: PropTypes.string.isRequired\r\n    })\r\n  };\r\n\r\n  _INITIAL_STATE ={\r\n    activeStatus: false,\r\n    isLoading: true,\r\n    error: {\r\n      status: false,\r\n      message: null\r\n    }\r\n  };\r\n\r\n  state = {...this._INITIAL_STATE};\r\n\r\n  // класс для переоформления спиннера\r\n  spinnerClassname = `currencies-table`;\r\n  // data для формирования header таблицы\r\n  tableHeaderValues = [\r\n    {id: 1, value: `Валюта`},\r\n    {id: 2, value: `Цена`}\r\n  ];\r\n\r\n  // переключатель activeStatus для currency-list\r\n  toggle = () => this.setState(({activeStatus}) =>({activeStatus: !activeStatus}));\r\n\r\n  // отправляем в store выбранную валюту, получаем обновленные данные\r\n  sendCurrency = async (value) => {\r\n    await this.props.setCurrencyInTable(value);\r\n    await this.addAllCourses();\r\n  }\r\n\r\n  // Error-handler, запускаемый при ошибке, также переводим статус загрузки в false\r\n  onError = (err) => {\r\n    this.setState({\r\n      error: {\r\n        status: true,\r\n        message: err.message\r\n      },\r\n      isLoading: false\r\n    });\r\n    throw err;\r\n  }\r\n\r\n  // добавления курсов валют\r\n  addAllCourses = async () => {\r\n    const {currencyPairService, currencyList, currenciesTable: {currentCurrency}, addCurrenciesValues} = this.props;\r\n\r\n    // до начала получения данных, применяем initialState, после получения, отсылаем в store и переводим loading в false\r\n    this.setState({...this._INITIAL_STATE});\r\n\r\n    await currencyPairService.getAllCourses(currentCurrency, currencyList)\r\n      .then(addCurrenciesValues)\r\n      .catch(this.onError);\r\n\r\n    this.setState({isLoading: false});\r\n  }\r\n\r\n  // listener отслеживает клики, при любом активном currency-list, при клике, вне окна, или же при смене фокуса на элемент без необходимого dataType, меняет состояние на false\r\n  listDisabler = (evt) => {\r\n\r\n    const {activeStatus} = this.state;\r\n    const {dataType} = this.props.currenciesTable;\r\n    const func = () => this.setState({activeStatus: false});\r\n    // для проверки соблюдения условий, используется общий handler\r\n    listDisablerHandler(evt, activeStatus, dataType, func);\r\n  };\r\n\r\n  // получаем данные после монтирования и назначаем обработчики\r\n  componentDidMount() {\r\n    this.addAllCourses();\r\n    document.addEventListener(`click`, this.listDisabler);\r\n    document.addEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(`click`, this.listDisabler);\r\n    document.removeEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {currencyList, currenciesTable: {currentCurrency, values: bodyValues, dataType}} = this.props;\r\n    const {activeStatus, isLoading, error: {status: error}} = this.state;\r\n    // data для построения таблицы\r\n    const tableData = {\r\n      headerValues: this.tableHeaderValues,\r\n      bodyValues\r\n    }\r\n\r\n    let tableComponent;\r\n\r\n    // отображаем нужный компонент в зависимости от state\r\n    if (!error && !isLoading){\r\n      tableComponent = <CurrenciesTableView>{tableData}</CurrenciesTableView>\r\n    }\r\n    else if (isLoading){\r\n      tableComponent = <Spinner>{this.spinnerClassname}</Spinner>;\r\n    }\r\n    else if(error){tableComponent = <ErrorIndicator/>;}\r\n\r\n    return (\r\n      <ErrorBoundary>\r\n        <div className=\"currency-table__component\">\r\n          {tableComponent}\r\n          <CurrenciesSelection\r\n            dataType={dataType}\r\n            toggleHandler={this.toggle}\r\n            activeStatus={activeStatus}\r\n            currency={currentCurrency}\r\n            currencyList={currencyList}\r\n            currencyListClickHandler={this.sendCurrency}/>\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({currencyList, currenciesTable, currencyPairService}) => ({currencyList, currenciesTable, currencyPairService})\r\n\r\nconst mapDispatchToProps ={\r\n    addCurrenciesValues,\r\n    setCurrencyInTable\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrenciesTable);","import CurrenciesTable from './currencies-table';\r\n\r\nexport default CurrenciesTable;","import SwitchButtons from \"./switch-buttons\";\r\nexport default SwitchButtons;","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nimport \"./switch-buttons.scss\";\r\n\r\nconst SwitchButtons = () =>(\r\n  <div className=\"switch-buttons\">\r\n    <NavLink to=\"/\" activeClassName=\"active\" exact>Конвертер</NavLink>\r\n    <NavLink to=\"/currencies-table\" activeClassName=\"active\">Таблица валют</NavLink>\r\n  </div>);\r\n\r\nexport default SwitchButtons;","import React from 'react';\r\nimport Converter from \"../converter\";\r\nimport CurrenciesList from \"../currencies-table\";\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport SwitchButtons from \"../switch-buttons\";\r\n\r\nconst App = () => (\r\n    <Router>\r\n      <div className=\"currencies-app\">\r\n        <SwitchButtons/>\r\n        <Switch>\r\n          <Route path=\"/\" component={Converter} exact/>\r\n          <Route path=\"/currencies-table\" component={CurrenciesList}/>\r\n          <Redirect to=\"/\"/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\nexport default App;","import {returnRoundValue, returnAnotherFieldType, returnConvertedValue} from \"../utils\";\r\n\r\nconst initialState = {\r\n  current:{\r\n    currency: `USD`,\r\n    value: 1,\r\n    exchangeRate: ``\r\n  },\r\n  converted:{\r\n    currency: `RUB`,\r\n    value: ``,\r\n    exchangeRate: ``\r\n  },\r\n  listsStatus:{\r\n    current: false,\r\n    converted: false\r\n  },\r\n  dataType: `currency-converter-item`\r\n};\r\n\r\nconst updateConverter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // получение обменного курса для пары валют\r\n    case `FETCH_PAIR_VALUE`:\r\n      const {value: currentValue } = state.current;\r\n\r\n      // вычисляем конвертируемое значение и округляем его\r\n      const convertedValue = (currentValue) ? returnRoundValue((currentValue * action.payload[0])) : ``;\r\n\r\n      return {\r\n        ...state,\r\n        current:{\r\n          ...state.current,\r\n          exchangeRate: action.payload[0]\r\n        },\r\n        converted:{\r\n          ...state.converted,\r\n          value: convertedValue,\r\n          exchangeRate: action.payload[1],\r\n        }\r\n      }\r\n    // добавление нового значения для определенного поля и сконвертированного результата для другого поля\r\n    case `ADD_CURRENCY_VALUE`:\r\n      const {type, value} = action.payload;\r\n      const anotherType = returnAnotherFieldType(type);\r\n      const anotherValue = returnConvertedValue(value, state[type].exchangeRate);\r\n\r\n      return {\r\n        ...state,\r\n        [type]: {\r\n          ...state[type],\r\n          value: (value) ? value : ``,\r\n        },\r\n        [anotherType]: {\r\n          ...state[anotherType],\r\n          value: anotherValue\r\n        }\r\n      }\r\n    // изменение валюты у определеннго поля\r\n    case `SET_CURRENCY`:\r\n      return {\r\n          ...state,\r\n          [action.payload.type]: {\r\n            ...state[action.payload.type],\r\n            currency: action.payload.value\r\n          }\r\n        }\r\n    // изменить статус активности у определенного списка\r\n    case `SET_LIST_STATUS`:\r\n      return {\r\n        ...state,\r\n        listsStatus:{\r\n          ...state.listsStatus,\r\n          ...action.payload\r\n        }\r\n      }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default updateConverter;","const initialState = {\r\n  values:{},\r\n  currentCurrency: `USD`,\r\n  dataType: `currency-table-item`\r\n}\r\n\r\nconst updateCurrenciesTable = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case `ADD_CURRENCIES_VALUES`:\r\n      return {\r\n        ...state,\r\n        values: action.payload\r\n      }\r\n    case `SET_CURRENCY_IN_TABLE`:\r\n      return {\r\n        ...state,\r\n        currentCurrency: action.payload\r\n      }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default updateCurrenciesTable;","import {returnRoundValue} from \"../utils\";\r\n\r\n// функция для метода getCourse\r\nconst returnPairCourse = async (pairs) =>{\r\n\r\n  let response = {\r\n    'USDRUB,RUBUSD': {\r\n      data: {USDRUB: '64.1824', RUBUSD: '0.0155806'},\r\n      message: \"rates\",\r\n      status: 200,\r\n    },\r\n    'USDEUR,EURUSD': {\r\n      data: {USDEUR: '0.92674', EURUSD: '1.07905'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'USDGBP,GBPUSD': {\r\n      data: {USDGBP: '0.7763', GBPUSD: '1.28841'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'USDBYN,BYNUSD': {\r\n      data: {USDBYN: '2.20558', BYNUSD: '0.453396'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'RUBUSD,USDRUB': {\r\n      data: {RUBUSD: '0.0155806', USDRUB: '64.1824'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'RUBEUR,EURRUB': {\r\n      data: {RUBEUR: '0.0144437', EURRUB: '69.244'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'RUBGBP,GBPRUB': {\r\n      data: {RUBGBP: '0.0120952', GBPRUB: '82.6773'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'RUBBYN,BYNRUB': {\r\n      data: {RUBBYN: '0.0343642', BYNRUB: '29.1002'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'EURRUB,RUBEUR': {\r\n      data: {EURRUB: '69.244', RUBEUR: '0.0144437'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'EURUSD,USDEUR': {\r\n      data: {EURUSD: '1.07905', USDEUR: '0.92674'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'EURGBP,GBPEUR': {\r\n      data: {EURGBP: '0.83767', GBPEUR: '1.19402'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'EURBYN,BYNEUR': {\r\n      data: {EURBYN: '2.37994', BYNEUR: '0.420182'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'GBPRUB,RUBGBP': {\r\n      data: {GBPRUB: '82.6773', RUBGBP: '0.0120952'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'GBPUSD,USDGBP': {\r\n      data: {GBPUSD: '1.28841', USDGBP: '0.7763'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'GBPEUR,EURGBP': {\r\n      data: {GBPEUR: '1.19402', EURGBP: '0.83767'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'GBPBYN,BYNGBP': {\r\n      data: {GBPBYN: '2.84169', BYNGBP: '0.351973'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'BYNRUB,RUBBYN': {\r\n      data: {BYNRUB: '29.1002', RUBBYN: '0.0343642'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'BYNUSD,USDBYN': {\r\n      data: {BYNUSD: '0.453396', USDBYN: '2.20558'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'BYNEUR,EURBYN': {\r\n      data: {BYNEUR: '0.420182', EURBYN: '2.37994'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    'BYNGBP,GBPBYN': {\r\n      data: {BYNGBP: '0.351973', GBPBYN: '2.84169'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n  };\r\n\r\n  return new Promise((resolve =>\r\n    setTimeout(() =>resolve(response[pairs])\r\n    , 100)\r\n   ));\r\n}\r\n// функция для метода getAllCourses\r\nconst returnAllPairs = (currency) =>{\r\n\r\n  let response = {\r\n    \"USD\":{\r\n        data: {USDRUB: '64.1824', USDEUR: '0.92674', USDGBP: '0.7763', USDBYN: '2.20558'},\r\n        message: \"rates\",\r\n        status: 200\r\n      },\r\n    \"RUB\":{\r\n      data: {RUBUSD: '0.0155806', RUBEUR: '0.0144437', RUBGBP: '0.0120952', RUBBYN: '0.0343642'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    \"EUR\":{\r\n      data: {EURRUB: '69.244', EURUSD: '1.07905', EURGBP: '0.83767', EURBYN: '2.37994'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    \"GBP\":{\r\n      data: {GBPRUB: '82.6773', GBPUSD: '1.28841', GBPEUR: '1.19402', GBPBYN: '2.84169'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n    \"BYN\":{\r\n      data: {BYNRUB: '29.1002', BYNUSD: '0.453396', BYNEUR: '0.420182', BYNGBP: '0.351973'},\r\n      message: \"rates\",\r\n      status: 200\r\n    },\r\n\r\n  };\r\n\r\n  return new Promise((resolve) =>\r\n    setTimeout(() =>resolve(response[currency]), 1500));\r\n}\r\n\r\nexport default class TestCurrencyPairService  {\r\n\r\n  _errorHandler = (response) =>{\r\n    switch (response.status) {\r\n      case `500`:\r\n        throw new Error(`Misspelled request`);\r\n      case `403`:\r\n        throw new Error(`Invalid api-key`);\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  // возвращает массив из двух значений следующего вида: [currentCurrencyValue, convertedCurrencyValue]\r\n  #formatResult = (values, pairsArray) => pairsArray.map(item => values[item]);\r\n\r\n  getCourse(pairArray){\r\n    // в случае если пара из одинаковых валют, возвращаем promise со значениями [1,1]\r\n    if (pairArray[0] === pairArray[1]){\r\n      return new Promise((resolve) => resolve([1,1]));\r\n    }\r\n\r\n    const currencyPairs =`${pairArray[0]},${pairArray[1]}`;\r\n\r\n    return returnPairCourse(currencyPairs)\r\n      // преобразуем полученый курс в пару массив, перед этим проверяя на корректный ответ\r\n      .then((result) =>{\r\n        this._errorHandler(result);\r\n        return this.#formatResult(result.data, pairArray)\r\n      })\r\n      .catch((err) => {throw err})\r\n  }\r\n\r\n  getAllCourses(currency){\r\n    return returnAllPairs(currency)\r\n      .then((result) =>{\r\n        // проверяем статус ответа, если необходимо вызываем ошибку\r\n        this._errorHandler(result);\r\n\r\n        // округляем полученные значения и возвращаем их\r\n        for (let key in result.data){\r\n          result.data[key] = returnRoundValue(Number(result.data[key]));\r\n        }\r\n        return result.data;\r\n      })\r\n      .catch((err) =>{throw err});\r\n  }\r\n}","import updateConverter from \"./converter\";\r\nimport updateCurrenciesTable from \"./currencies-table\";\r\nimport CurrencyPairService from \"../services/currency-test-pair-service\";\r\n// import CurrencyPairService from \"../services/currency-pair-service\";\r\n\r\nconst initialState = {\r\n  currencyList: [\r\n    `RUB`,\r\n    `USD`,\r\n    `EUR`,\r\n    `GBP`,\r\n    `BYN`\r\n  ],\r\n  currencyPairService: new CurrencyPairService()\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return{\r\n    ...state,\r\n    converter: updateConverter(state.converter, action),\r\n    currenciesTable: updateCurrenciesTable(state.currenciesTable, action)\r\n  }\r\n}\r\n\r\nexport default reducer;","import {createStore} from 'redux';\r\nimport reducer from \"./reducers\";\r\n\r\n// const middleware = () => (dispatch) => (action) =>{\r\n//   console.log(action.type)\r\n//   console.log(action.payload)\r\n//    return dispatch(action)\r\n// }\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/app/app\";\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App></App>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}