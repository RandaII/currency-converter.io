{"version":3,"sources":["utils/index.js","actions/index.js","services/currency-pair-service.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/error-boundary/index.js","components/error-boundary/error-boudary.js","components/converter-input-field/index.js","components/converter-input-field/converter-input-field.js","components/selector-button/index.js","components/selector-button/selector-button.js","components/currency-list/index.js","components/currency-list/currency-list.js","components/currencies-selection/currencies-selection.js","components/currencies-selection/index.js","components/converter-row/converter-row.js","components/converter-row/index.js","components/converter-view/index.js","components/converter-view/converter-view.js","components/converter/converter.js","components/converter/index.js","components/spinner/index.js","components/spinner/spinner.js","components/currencies-table-body/index.js","components/currencies-table-body/currencies-table-body.js","components/currencies-table-view/index.js","components/currencies-table-view/currencies-table-view.js","components/currencies-table/currencies-table.js","components/currencies-table/index.js","components/switch-buttons/index.js","components/switch-buttons/switch-buttons.js","components/app/app.js","reducers/converter.js","reducers/currencies-table.js","reducers/index.js","store.js","index.js"],"names":["returnRoundValue","value","toFixed","returnAnotherFieldType","PropTypes","string","number","listDisablerHandler","evt","status","dataType","func","type","key","target","getAttribute","returnConvertedValue","exchangeRate","currencyPairService","_errorHandler","response","Error","values","pairsArray","map","item","pairArray","Promise","resolve","currencyPairs","fetch","this","then","json","result","data","catch","err","currency","list","pairs","reduce","currentValue","Number","setListStatus","payload","setTableStatuses","newActiveStatus","newIsLoading","newError","dispatch","getState","currenciesTable","activeStatus","isLoading","error","undefined","ErrorIndicator","className","ErrorBoundary","state","hasError","setState","props","children","Component","ConverterInputField","onInputChange","currencyValue","clearInput","blur","onChange","match","index","indexOf","slice","length","commaIndex","returnCheckedValue","maxLength","onClick","onKeyDown","tabIndex","SelectorButton","classNames","data-element-type","CurrencyList","handler","dataset","elementType","elementValue","data-element-value","CurrenciesSelection","toggleHandler","currencyList","currencyListClickHandler","Transition","in","timeout","mountOnEnter","unmountOnExit","mapDispatchToProps","addCurrencyValue","setCurrency","ConverterRow","connect","converter","current","converted","listsStatus","anotherType","sendCurrency","a","ConverterView","rowTypes","id","Converter","listDisabler","fetchPairValue","document","addEventListener","removeEventListener","errorStatus","currentCurrency","convertedCurrency","pair","getCourse","message","Spinner","CurrenciesTableBody","Object","entries","i","CurrenciesTableView","headerValues","bodyValues","CurrenciesTable","spinnerClassname","tableHeaderValues","toggle","setCurrencyInTable","addCurrenciesValues","tableComponent","tableData","getAllCourses","finally","SwitchButtons","to","activeClassName","exact","App","path","component","CurrenciesList","initialState","updateConverter","action","convertedValue","anotherValue","updateCurrenciesTable","reducer","store","createStore","applyMiddleware","thunk","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fcbb23f6.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\n// проверяем значение на запрещенные символы и преобразует\r\nconst returnCheckedValue = (value) =>{\r\n\r\n  const numberRegExp = /^\\.|^,|[^\\d.,]|[.,]\\d+[.,]|([.,]{2})/gm;\r\n\r\n  // проверяем значение на ввод иных символов, кроме чисел, точки и запятой, (а также дублирования точки/запятой) в случае их присутствия, обрезаем строку до прежнего состояния\r\n  const match = value.match(numberRegExp)?.[0];\r\n  if (match){\r\n    const index = value.indexOf(match);\r\n    value = value.slice(0, index) + value.slice(index + 1);\r\n  }\r\n\r\n  // проверяем, что после нуля не идет целое число, и срезаем 0 в случае целого числа, а не точки)\r\n\r\n  if (value[0] === `0` && value.length > 1 && value[1] !== `.`){\r\n    value = value.slice(1);\r\n  }\r\n\r\n  // конвертация запятой в точку\r\n  const commaIndex = value.indexOf(`,`);\r\n\r\n  if (commaIndex !== -1){\r\n    value = value.slice(0, commaIndex) + `.` + value.slice(commaIndex + 1);\r\n  }\r\n  return value;\r\n}\r\n\r\n// возвращает, особым образом округленное значение\r\nconst returnRoundValue = (value) =>{\r\n  // функция для возврата округленного значения\r\n  if (value >= 0.1){\r\n    return +value.toFixed(2);\r\n  }\r\n  else if (value < 0.1 && value > 0){\r\n    return +value.toFixed(3)\r\n  }\r\n  else if (value === 0){\r\n    return 0;\r\n  }\r\n}\r\n\r\nconst PropTypesTemplates = {\r\n\r\n  stringWithNumber: [\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ],\r\n\r\n  currenciesArray: [\r\n    `RUB`,\r\n    `USD`,\r\n    `EUR`,\r\n    `GBP`,\r\n    `BYN`\r\n  ],\r\n}\r\n\r\n// возвращает другой тип поля для конвертера\r\nconst returnAnotherFieldType = (value) => (value === `current`) ? `converted` : `current`;\r\n\r\n// общий handler для выключения currency-list\r\nconst listDisablerHandler = (evt, status, dataType, func) =>{\r\n  // срабатывает при true статусе, по клику или нажатию клавиши таб\r\n  if (status &&\r\n    (evt.type === `click` ||\r\n    evt.key === `Tab`)){\r\n\r\n    const attributeValue = evt.target.getAttribute(`data-element-type`);\r\n    // если нет необходимого значения атрибута, вызываем disable функцию\r\n    if (attributeValue !== dataType) {func();}\r\n  }\r\n}\r\n\r\n// функция для возрата сконвертированного значения\r\nconst returnConvertedValue = (value, exchangeRate) =>\r\n    value ? returnRoundValue(+value * exchangeRate) : ``;\r\n\r\nexport {\r\n  returnCheckedValue,\r\n  returnRoundValue,\r\n  returnAnotherFieldType,\r\n  returnConvertedValue,\r\n  PropTypesTemplates,\r\n  listDisablerHandler\r\n}","import CurrencyPairService from \"../services/currency-pair-service\";\r\n\r\nconst currencyPairService = new CurrencyPairService();\r\n\r\n// payload массив из двух обменных значений валют - [current, converted]\r\nconst fetchPairValue = () => (dispatch, getState) =>{\r\n  const {\r\n    converter: {\r\n      current: {currency: currentCurrency},\r\n      converted: {currency: convertedCurrency}\r\n    }\r\n  } = getState();\r\n\r\n  // образуем ключи текущей пары\r\n  const pair = [currentCurrency + convertedCurrency, convertedCurrency + currentCurrency];\r\n\r\n  // получаем курс текущей пары\r\n  currencyPairService.getCourse(pair)\r\n    // отправляем значение в store\r\n    .then((payload) => dispatch({\r\n        type: `FETCH_PAIR_VALUE`,\r\n        payload\r\n      })\r\n    )\r\n    .catch((err) => dispatch({\r\n      type: `SET_CONVERTER_ERROR`,\r\n      payload:{\r\n        error: {\r\n          status: true,\r\n          message: err.message\r\n        }\r\n      }\r\n    }));\r\n}\r\n\r\n// добавления курсов валют, payload объект со свойствами type (current или converted поле) и value {type, value}\r\nconst addCurrencyValue = (payload) =>({\r\n    type: `ADD_CURRENCY_VALUE`,\r\n    payload\r\n});\r\n\r\n// payload объект со свойствами type (current или converted поле) и value (название валюты - USD и т.п.) {type, value}\r\nconst setCurrency = (value) =>({\r\n  type: `SET_CURRENCY`,\r\n  payload: value\r\n});\r\n\r\n// payload объект со свойством current или converted и булевым значением {current || converted}\r\nconst setListStatus = (payload) =>({\r\n  type: `SET_LIST_STATUS`,\r\n  payload\r\n});\r\n\r\n// для задания статусов, любое поле не обязательное\r\nconst setTableStatuses = (newActiveStatus, newIsLoading, newError) => (dispatch, getState) =>{\r\n  const {activeStatus, isLoading, error} = getState().currenciesTable;\r\n\r\n  dispatch ({\r\n    type: `SET_TABLE_STATUSES`,\r\n    payload:{\r\n      activeStatus: (newActiveStatus !== undefined) ? newActiveStatus : activeStatus,\r\n      isLoading: (newIsLoading !== undefined) ? newIsLoading : isLoading,\r\n      error: (newError !== undefined) ? newError : error,\r\n    }\r\n  });\r\n}\r\n\r\n// payload объект c валютными парами вида: {pairName: numberValue}\r\nconst addCurrenciesValues = () => (dispatch, getState) =>{\r\n  const {currencyList, currenciesTable: {currentCurrency}} = getState();\r\n\r\n  // до начала получения данных, сбрасываем состояния до initialState, после получения, отсылаем в store и переводим loading в false\r\n  setTableStatuses(false, true, {status: false, message: null})(dispatch, getState);\r\n\r\n  currencyPairService.getAllCourses(currentCurrency, currencyList)\r\n    .then((payload) => dispatch({\r\n      type: `ADD_CURRENCIES_VALUES`,\r\n      payload\r\n    }))\r\n    .catch((err) =>\r\n      setTableStatuses(undefined,\r\n        false,\r\n        {status: true, message: err.message})\r\n      (dispatch, getState))\r\n    .finally(() =>\r\n      setTableStatuses(undefined,\r\n        false)(dispatch, getState));\r\n}\r\n\r\n// payload строка с названием валюты - USD, GBP и т.п.\r\nconst setCurrencyInTable = (payload) =>({\r\n    type: `SET_CURRENCY_IN_TABLE`,\r\n    payload\r\n});\r\n\r\nexport {\r\n  fetchPairValue,\r\n  addCurrencyValue,\r\n  setCurrency,\r\n  setListStatus,\r\n  addCurrenciesValues,\r\n  setCurrencyInTable,\r\n  setTableStatuses\r\n}","import {returnRoundValue} from \"../utils\";\r\n\r\nexport default class CurrencyPairService  {\r\n\r\n  #path = `https://currate.ru/api/?get=rates&pairs=`;\r\n  #key = `&key=c2ce7bb0c7510d68824e52174a9e452a`;\r\n\r\n  _errorHandler = (response) =>{\r\n    switch (response.status) {\r\n      case `500`:\r\n        throw new Error(`Misspelled request`);\r\n      case `403`:\r\n        throw new Error(`Invalid api-key`);\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  // возвращает массив из двух значений следующего вида: [currentCurrencyValue, convertedCurrencyValue]\r\n  #formatResult = (values, pairsArray) => pairsArray.map(item => values[item]);\r\n\r\n  getCourse(pairArray){\r\n    // в случае если пара из одинаковых валют, возвращаем promise со значениями [1,1]\r\n    if (pairArray[0] === pairArray[1]){\r\n      return new Promise((resolve) => resolve([1,1]));\r\n    }\r\n\r\n    const currencyPairs =`${pairArray[0]},${pairArray[1]}`;\r\n\r\n    // получаем адрес путем конкатенации пути, валютной пары и ключа\r\n    return fetch(this.#path + currencyPairs + this.#key)\r\n      .then((response) => response.json())\r\n      // преобразуем полученый курс в пару массив, перед этим проверяя на корректный ответ от сервера\r\n      .then((result) =>{\r\n        this._errorHandler(result);\r\n        return this.#formatResult(result.data, pairArray)\r\n      })\r\n      .catch((err) => {throw err})\r\n  }\r\n\r\n  getAllCourses(currency, list){\r\n    // составляем пары\r\n    let pairs = list.reduce((pairs, currentValue,) => pairs += `${currency}${currentValue},`, ``);\r\n\r\n    return fetch(this.#path +pairs + this.#key)\r\n      .then((response) => response.json())\r\n      .then((result) =>{\r\n        // проверяем статус ответа, если необходимо вызываем ошибку\r\n        this._errorHandler(result);\r\n\r\n        // округляем полученные значения и возвращаем их\r\n        for (let key in result.data){\r\n          result.data[key] = returnRoundValue(Number(result.data[key]));\r\n        }\r\n        return result.data;\r\n      })\r\n      .catch((err) =>{throw err});\r\n  }\r\n}","import ErrorIndicator from \"./error-indicator\";\r\nexport default ErrorIndicator;","import \"./error-indicator.scss\";\r\n\r\nconst ErrorIndicator = () =>{\r\n  return(\r\n    <div className=\"error-indicator\">\r\n      <p>Что-то пошло не так</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorIndicator","import ErrorBoundary from \"./error-boudary\";\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nexport default class ErrorBoundary extends Component{\r\n\r\n  state = {\r\n    hasError: false\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n    return (this.state.hasError) ? <ErrorIndicator/> : this.props.children;\r\n  }\r\n}","import ConverterInputField from \"./converter-input-field\";\r\n\r\nexport default ConverterInputField;","import React from 'react';\r\nimport {PropTypesTemplates as Templates, returnCheckedValue} from \"../../utils\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./converter-input-field.scss\"\r\n\r\nconst ConverterInputField = ({onInputChange, type, currencyValue}) => {\r\n\r\n  const onchange = ({target: {value}}) => {\r\n    //проверяем поступившее значение на недопустимые символы и делаем еще несколько проверок, после чего переприсваеваем\r\n    value = returnCheckedValue(value);\r\n\r\n    // в случае, если значение после проверки изменилось, отправляем его в store\r\n    if (value !== currencyValue){\r\n      onInputChange({\r\n        type,\r\n        value\r\n      });\r\n    }\r\n  }\r\n\r\n  // очистка input\r\n  const clearInput = (evt) => {\r\n    onInputChange({\r\n      type,\r\n      value: ``\r\n    });\r\n    evt.target.blur();\r\n  };\r\n\r\n  // обработчик для управления с клавиатуры\r\n  const clearInputOnKeyDown = (evt) =>{\r\n    if (evt.key === `Enter`){clearInput(evt);}\r\n  }\r\n\r\n  return (\r\n    <div className=\"converter__input-block\">\r\n      <input type=\"text\"\r\n             value={currencyValue}\r\n             onChange={onchange}\r\n             maxLength={15}/>\r\n      <span onClick={clearInput} onKeyDown={clearInputOnKeyDown} className=\"converter__input-clear\" tabIndex=\"0\">&#215;</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nConverterInputField.propTypes = {\r\n  onInputChange: PropTypes.func.isRequired,\r\n  currencyValue: PropTypes.oneOfType(Templates.stringWithNumber).isRequired,\r\n  type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ConverterInputField;","import SelectorButton from \"./selector-button\";\r\nexport default SelectorButton;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./selector-button.scss\";\r\n\r\nconst SelectorButton = ({dataType = \"\", onClick, children, classNames = \"\"}) =>(\r\n    <button\r\n      data-element-type={dataType}\r\n      className={ `selected-currency-button ${classNames}`}\r\n      onClick={onClick}>\r\n        {children}\r\n      <i className=\"fa--converter fa fa-angle-down\"\r\n         data-element-type={dataType}></i>\r\n    </button>);\r\n\r\nSelectorButton.propTypes = {\r\n  dataType: PropTypes.string,\r\n  classNames: PropTypes.string,\r\n  children: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SelectorButton;","import CurrencyList from \"./currency-list\";\r\nexport default CurrencyList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./currency-list.scss\";\r\n\r\nconst CurrencyList = ({children, classNames = \"\", dataType = \"\", onClick = () =>{}}) => {\r\n  // общий handler для ввода с клавиатуры/мыши, в случае соответствия dataType\r\n  const handler = (evt) =>{\r\n    if (evt.target.dataset.elementType === dataType){\r\n      if (evt.key === `Enter` || evt.type === `click`){\r\n        onClick(evt.target.dataset.elementValue);\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <ul className={`currency-list ${classNames}`} onKeyDown={handler} onClick={handler}>\r\n      {children.map((value, index) =>\r\n        <li className=\"currency-list-item\"\r\n            key={index}\r\n            data-element-type={dataType}\r\n            data-element-value={value}\r\n            tabIndex=\"0\">{value}\r\n        </li>)}\r\n    </ul>);\r\n}\r\n\r\nCurrencyList.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n  classNames: PropTypes.string,\r\n  dataType: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default CurrencyList;","import React from 'react';\r\nimport SelectorButton from \"../selector-button\";\r\nimport CurrencyList from \"../currency-list\";\r\nimport PropTypes from \"prop-types\";\r\nimport {PropTypesTemplates as Templates} from \"../../utils\";\r\nimport {Transition} from \"react-transition-group\";\r\n\r\nimport \"./currencies-selection.scss\";\r\n// компонет выбора валюты, передает пропсы и отвечает за анимацию вложенных компонентов\r\nconst CurrenciesSelection = (\r\n  {dataType, toggleHandler, activeStatus, currency, currencyList, currencyListClickHandler = () =>{}}) =>(\r\n    <div className=\"converter__currency-type-block\">\r\n      <Transition\r\n        in={activeStatus}\r\n        timeout={200}>\r\n          {(state) =>(\r\n              <SelectorButton\r\n                dataType={dataType}\r\n                onClick={toggleHandler}\r\n                classNames={state}>\r\n                  {currency}\r\n              </SelectorButton>)}\r\n      </Transition>\r\n\r\n      <Transition\r\n        in={activeStatus}\r\n        timeout={200}\r\n        mountOnEnter\r\n        unmountOnExit>\r\n          {(state) =>(\r\n            <CurrencyList\r\n              dataType={dataType}\r\n              classNames={state}\r\n              onClick={currencyListClickHandler}>\r\n                {currencyList}\r\n            </CurrencyList>)}\r\n      </Transition>\r\n    </div>);\r\n\r\nCurrenciesSelection.propTypes = {\r\n  dataType: PropTypes.string.isRequired,\r\n  toggleHandler: PropTypes.func.isRequired,\r\n  activeStatus: PropTypes.bool.isRequired,\r\n  currency: PropTypes.oneOf(Templates.currenciesArray).isRequired,\r\n  currencyList: PropTypes.array.isRequired,\r\n  currencyListClickHandler: PropTypes.func\r\n};\r\n\r\nexport default CurrenciesSelection;","import CurrenciesSelection from \"./currencies-selection\";\r\n\r\nexport default CurrenciesSelection;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport ConverterInputField from \"../converter-input-field\";\r\nimport CurrenciesSelection from \"../currencies-selection\";\r\nimport {addCurrencyValue, setListStatus, setCurrency} from \"../../actions\";\r\nimport \"./converter-row.scss\";\r\nimport {PropTypesTemplates as Templates, returnAnotherFieldType} from \"../../utils\";\r\n\r\nconst ConverterRow  = (props) =>{\r\n  const {type, converter, setListStatus, setCurrency, fetch, addCurrencyValue, currencyList} = props;\r\n\r\n  // переключатель currency-list\r\n  const toggleHandler = () => {\r\n\r\n    // получаем тип другого currency-list\r\n    let anotherType = returnAnotherFieldType(type);\r\n\r\n    // меняем состояние текущего currency-list на противоположное, для другого currency-list, состояние ставим в false\r\n\r\n    let payload = { [type]: !converter.listsStatus[type] };\r\n\r\n    if (converter.listsStatus[anotherType]){\r\n      payload[anotherType] = false;\r\n    }\r\n\r\n    setListStatus(payload);\r\n  }\r\n\r\n  // отправляем выбранную валюту, получаем обновленные данные для новой валютной пары, скрываем currency-list\r\n  const sendCurrency = async (value) => {\r\n    await setCurrency({type, value});\r\n    await fetch();\r\n    toggleHandler();\r\n  }\r\n\r\n  // при вводе в input-field, функция отправит новое значение в store\r\n  const onInputChange = (value) => addCurrencyValue(value);\r\n\r\n  return (\r\n    <div className=\"converter__currency-block\">\r\n\r\n      <ConverterInputField\r\n        onInputChange={onInputChange}\r\n        currencyValue={converter[type].value}\r\n        type={type}/>\r\n\r\n      <CurrenciesSelection\r\n        dataType={converter.dataType}\r\n        toggleHandler={toggleHandler}\r\n        activeStatus={converter.listsStatus[type]}\r\n        currency={converter[type].currency}\r\n        currencyList={currencyList}\r\n        currencyListClickHandler={sendCurrency}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nConverterRow.propTypes = {\r\n  addCurrencyValue: PropTypes.func.isRequired,\r\n  setListStatus: PropTypes.func.isRequired,\r\n  setCurrency: PropTypes.func.isRequired,\r\n  fetch: PropTypes.func.isRequired,\r\n  converter: PropTypes.shape({\r\n    converted: PropTypes.shape({\r\n      currency: PropTypes.oneOf(Templates.currenciesArray).isRequired,\r\n      value: PropTypes.oneOfType(Templates.stringWithNumber).isRequired\r\n    }).isRequired,\r\n    current: PropTypes.shape({\r\n      currency: PropTypes.oneOf(Templates.currenciesArray).isRequired,\r\n      value: PropTypes.oneOfType(Templates.stringWithNumber).isRequired\r\n    }).isRequired,\r\n    dataType: PropTypes.string.isRequired,\r\n    listsStatus: PropTypes.shape({\r\n      current: PropTypes.bool.isRequired,\r\n      converted: PropTypes.bool.isRequired,\r\n    }).isRequired\r\n  }).isRequired,\r\n  currencyList: PropTypes.array.isRequired,\r\n  type: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = ({converter, currencyList}) =>(\r\n  {converter:{\r\n      current:{\r\n        value: converter.current.value,\r\n        currency: converter.current.currency\r\n      },\r\n      converted:{\r\n        value: converter.converted.value,\r\n        currency: converter.converted.currency\r\n      },\r\n      dataType: converter.dataType,\r\n      listsStatus: converter.listsStatus\r\n    },\r\n  currencyList});\r\n\r\nconst mapDispatchToProps ={\r\n    addCurrencyValue,\r\n    setListStatus,\r\n    setCurrency\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConverterRow);","import ConverterRow from \"./converter-row\";\r\nexport default ConverterRow;","import ConverterView from \"./converter-view\";\r\nexport default ConverterView;","import React from \"react\";\r\nimport ConverterRow from \"../converter-row\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./converter-view.scss\";\r\n\r\nconst ConverterView = ({rowTypes, fetch}) =>(\r\n    <main className=\"converter\">\r\n      <div className=\"converter__wrapper\">\r\n        {\r\n          rowTypes.map(({id, type}) =>(\r\n            <ConverterRow key={id} type={type} fetch={fetch}/>\r\n          ))\r\n        }\r\n      </div>\r\n    </main>\r\n  );\r\n\r\nConverterView.propTypes = {\r\n  rowTypes: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    type: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  fetch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ConverterView;","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {fetchPairValue, setListStatus} from \"../../actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport {PropTypesTemplates as Templates, listDisablerHandler} from \"../../utils\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport ErrorBoundary from \"../error-boundary\";\r\nimport ConverterView from \"../converter-view\";\r\n\r\nclass Converter extends Component {\r\n\r\n  static propTypes = {\r\n    converter: PropTypes.shape({\r\n      converted: PropTypes.shape({\r\n        currency: PropTypes.oneOf(Templates.currenciesArray).isRequired\r\n      }).isRequired,\r\n      current: PropTypes.shape({\r\n        currency: PropTypes.oneOf(Templates.currenciesArray).isRequired\r\n      }).isRequired,\r\n      dataType: PropTypes.string.isRequired,\r\n      listsStatus: PropTypes.shape({\r\n        current: PropTypes.bool.isRequired,\r\n        converted: PropTypes.bool.isRequired,\r\n      }).isRequired,\r\n      error: PropTypes.shape({\r\n        status: PropTypes.bool.isRequired,\r\n        message: PropTypes.oneOfType([\r\n          PropTypes.number,\r\n          PropTypes.string\r\n        ])\r\n      })\r\n    }),\r\n    fetchPairValue: PropTypes.func.isRequired,\r\n    setListStatus: PropTypes.func.isRequired\r\n  };\r\n\r\n  // Типы для row компонентов\r\n  rowTypes = [\r\n    {id:0, type:`current`},\r\n    {id:1, type:`converted`}\r\n  ];\r\n\r\n  // listener отслеживает клики, при любом активном currency-list, при клике, вне окна, или же при смене фокуса на элемент без необходимого dataType, меняет состояние на false\r\n  listDisabler = (evt) =>{\r\n    const {dataType, listsStatus:{current, converted}} = this.props.converter;\r\n    const activeStatus = current || converted;\r\n    const func = () =>\r\n        this.props.setListStatus({\r\n          current: false,\r\n          converted: false\r\n        });\r\n    // для проверки соблюдения условий, используется общий handler\r\n    listDisablerHandler(evt, activeStatus, dataType, func);\r\n  }\r\n\r\n  // после монтирования получаем текущий курс и назначаем обработчики\r\n  componentDidMount() {\r\n    this.props.fetchPairValue();\r\n    document.addEventListener(`click`, this.listDisabler);\r\n    document.addEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(`click`, this.listDisabler);\r\n    document.removeEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {status: errorStatus} = this.props.converter.error;\r\n\r\n    // в зависимости от статуса, показываем нужный компонент\r\n    return (\r\n      <ErrorBoundary>\r\n        {(errorStatus && <ErrorIndicator/>) ||\r\n        <ConverterView\r\n          rowTypes={this.rowTypes}\r\n          fetch={this.props.fetchPairValue}/>}\r\n      </ErrorBoundary>);\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {fetchPairValue, setListStatus};\r\n\r\nconst mapStateToProps = ({converter}) => ({\r\n  converter:{\r\n    current: {currency:converter.current.currency},\r\n    converted: {currency:converter.converted.currency},\r\n    dataType: converter.dataType,\r\n    listsStatus: converter.listsStatus,\r\n    error: converter.error\r\n  }});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Converter);","import Converter from \"./converter\";\r\n\r\nexport default Converter;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React from \"react\";\r\nimport \"./spinner.scss\";\r\n\r\nconst Spinner = ({children}) =>(\r\n    <div className= {`spinner ${children}`}>\r\n      <div className=\"loadingio-spinner-eclipse-p19pnm2p23\">\r\n        <div className=\"ldio-pnzr8yywkb\">\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    </div>);\r\n\r\nexport default Spinner;","import CurrenciesTableBody from \"./currencies-table-body\";\r\nexport default CurrenciesTableBody;","import React from \"react\";\r\nimport Proptypes from \"prop-types\";\r\n\r\nconst CurrenciesTableBody = ({children}) =>(\r\n  <tbody>\r\n    {\r\n      Object.entries(children).map(([pair, value], i) =>(\r\n        <tr className=\"currency-table__row\" key={i}>\r\n          <td>{pair.slice(0,3)}/{pair.slice(3)}</td>\r\n          <td>{value}</td>\r\n        </tr>))\r\n    }\r\n  </tbody>);\r\n\r\nCurrenciesTableBody.propTypes = {\r\n  children: Proptypes.object.isRequired\r\n}\r\n\r\nexport default CurrenciesTableBody","import CurrenciesTableView from \"./currencies-table-view\";\r\nexport default CurrenciesTableView;","import React from \"react\";\r\nimport CurrenciesTableBody from \"../currencies-table-body\";\r\nimport Proptypes from \"prop-types\";\r\nimport \"./currencies-table-view.scss\";\r\n\r\nconst CurrenciesTableView = ({children:{headerValues, bodyValues}}) =>(\r\n  <div className=\"currency-table__wrapper\">\r\n    <table className=\"currency-table\">\r\n      <thead>\r\n      <tr className=\"currency-table__row\">\r\n        {headerValues.map(({id, value}) => <th key={id}>{value}</th>)}\r\n      </tr>\r\n      </thead>\r\n      <CurrenciesTableBody>{bodyValues}</CurrenciesTableBody>\r\n    </table>\r\n  </div>);\r\n\r\nCurrenciesTableView.propTypes = {\r\n  children: Proptypes.shape({\r\n    headerValues: Proptypes.arrayOf(Proptypes.shape({\r\n      id: Proptypes.number.isRequired,\r\n      value: Proptypes.string.isRequired\r\n    })).isRequired,\r\n    bodyValues: Proptypes.object.isRequired\r\n  }).isRequired\r\n}\r\n\r\nexport default CurrenciesTableView;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addCurrenciesValues, setCurrencyInTable ,setTableStatuses} from \"../../actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../error-boundary\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport CurrenciesSelection from \"../currencies-selection/currencies-selection\";\r\nimport CurrenciesTableView from \"../currencies-table-view\";\r\nimport {listDisablerHandler} from \"../../utils\";\r\n\r\nclass CurrenciesTable extends Component {\r\n\r\n  static propTypes = {\r\n    addCurrenciesValues: PropTypes.func.isRequired,\r\n    setCurrencyInTable: PropTypes.func.isRequired,\r\n    currencyList: PropTypes.array.isRequired,\r\n    currenciesTable: PropTypes.shape({\r\n      currentCurrency: PropTypes.string.isRequired,\r\n      values: PropTypes.object.isRequired,\r\n      dataType: PropTypes.string.isRequired,\r\n      activeStatus: PropTypes.bool.isRequired,\r\n      isLoading: PropTypes.bool.isRequired,\r\n      error: PropTypes.shape({\r\n        status: PropTypes.bool.isRequired,\r\n        message: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n      })\r\n    })\r\n  };\r\n\r\n  // класс для переоформления спиннера\r\n  spinnerClassname = `currencies-table`;\r\n  // data для формирования header таблицы\r\n  tableHeaderValues = [\r\n    {id: 1, value: `Валюта`},\r\n    {id: 2, value: `Цена`}\r\n  ];\r\n\r\n  // переключатель activeStatus для currency-list\r\n  toggle = () => this.props.setTableStatuses(!this.props.currenciesTable.activeStatus);\r\n\r\n  // отправляем в store выбранную валюту, получаем обновленные данные\r\n  sendCurrency = async (value) => {\r\n    await this.props.setCurrencyInTable(value);\r\n    this.props.addCurrenciesValues();\r\n  }\r\n\r\n  // listener отслеживает клики, при любом активном currency-list, при клике, вне окна, или же при смене фокуса на элемент без необходимого dataType, меняет состояние на false\r\n  listDisabler = (evt) => {\r\n    const {dataType, activeStatus} = this.props.currenciesTable;\r\n    const func = () => this.props.setTableStatuses(false);\r\n    // для проверки соблюдения условий, используется общий handler\r\n    listDisablerHandler(evt, activeStatus, dataType, func);\r\n  };\r\n\r\n  // получаем данные после монтирования и назначаем обработчики\r\n  componentDidMount() {\r\n    this.props.addCurrenciesValues();\r\n    document.addEventListener(`click`, this.listDisabler);\r\n    document.addEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(`click`, this.listDisabler);\r\n    document.removeEventListener(`keyup`, this.listDisabler);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {currencyList, currenciesTable: {currentCurrency, values: bodyValues, dataType, activeStatus, isLoading, error: {status: error}}} = this.props;\r\n\r\n    // data для построения таблицы\r\n    const tableData = {\r\n      headerValues: this.tableHeaderValues,\r\n      bodyValues\r\n    }\r\n\r\n    let tableComponent;\r\n\r\n    // отображаем нужный компонент в зависимости от state\r\n    if (!error && !isLoading){\r\n      tableComponent = <CurrenciesTableView>{tableData}</CurrenciesTableView>\r\n    }\r\n    else if (isLoading){\r\n      tableComponent = <Spinner>{this.spinnerClassname}</Spinner>;\r\n    }\r\n    else if(error){tableComponent = <ErrorIndicator/>;}\r\n\r\n    return (\r\n      <ErrorBoundary>\r\n        <div className=\"currency-table__component\">\r\n          {tableComponent}\r\n          <CurrenciesSelection\r\n            dataType={dataType}\r\n            toggleHandler={this.toggle}\r\n            activeStatus={activeStatus}\r\n            currency={currentCurrency}\r\n            currencyList={currencyList}\r\n            currencyListClickHandler={this.sendCurrency}/>\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({currencyList, currenciesTable}) => ({currencyList, currenciesTable})\r\n\r\nconst mapDispatchToProps ={\r\n    addCurrenciesValues,\r\n    setCurrencyInTable,\r\n    setTableStatuses\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrenciesTable);","import CurrenciesTable from './currencies-table';\r\n\r\nexport default CurrenciesTable;","import SwitchButtons from \"./switch-buttons\";\r\nexport default SwitchButtons;","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nimport \"./switch-buttons.scss\";\r\n\r\nconst SwitchButtons = () =>(\r\n  <div className=\"switch-buttons\">\r\n    <NavLink to=\"/\" activeClassName=\"active\" exact>Конвертер</NavLink>\r\n    <NavLink to=\"/currencies-table\" activeClassName=\"active\">Таблица валют</NavLink>\r\n  </div>);\r\n\r\nexport default SwitchButtons;","import React from 'react';\r\nimport Converter from \"../converter\";\r\nimport CurrenciesList from \"../currencies-table\";\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport SwitchButtons from \"../switch-buttons\";\r\n\r\nconst App = () => (\r\n    <Router>\r\n      <div className=\"currencies-app\">\r\n        <SwitchButtons/>\r\n        <Switch>\r\n          <Route path=\"/\" component={Converter} exact/>\r\n          <Route path=\"/currencies-table\" component={CurrenciesList}/>\r\n          <Redirect to=\"/\"/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\nexport default App;","import {returnRoundValue, returnAnotherFieldType, returnConvertedValue} from \"../utils\";\r\n\r\nconst initialState = {\r\n  current:{\r\n    currency: `USD`,\r\n    value: 1,\r\n    exchangeRate: ``\r\n  },\r\n  converted:{\r\n    currency: `RUB`,\r\n    value: ``,\r\n    exchangeRate: ``\r\n  },\r\n  listsStatus:{\r\n    current: false,\r\n    converted: false\r\n  },\r\n  dataType: `currency-converter-item`,\r\n  error: {\r\n    status: false,\r\n    message: null\r\n  }\r\n};\r\n\r\nconst updateConverter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // получение обменного курса для пары валют\r\n    case `FETCH_PAIR_VALUE`:\r\n      const {value: currentValue } = state.current;\r\n\r\n      // вычисляем конвертируемое значение и округляем его\r\n      const convertedValue = (currentValue) ? returnRoundValue((currentValue * action.payload[0])) : ``;\r\n\r\n      return {\r\n        ...state,\r\n        current:{\r\n          ...state.current,\r\n          exchangeRate: action.payload[0]\r\n        },\r\n        converted:{\r\n          ...state.converted,\r\n          value: convertedValue,\r\n          exchangeRate: action.payload[1],\r\n        }\r\n      }\r\n    // добавление нового значения для определенного поля и сконвертированного результата для другого поля\r\n    case `ADD_CURRENCY_VALUE`:\r\n      const {type, value} = action.payload;\r\n      const anotherType = returnAnotherFieldType(type);\r\n      const anotherValue = returnConvertedValue(value, state[type].exchangeRate);\r\n\r\n      return {\r\n        ...state,\r\n        [type]: {\r\n          ...state[type],\r\n          value: (value) ? value : ``,\r\n        },\r\n        [anotherType]: {\r\n          ...state[anotherType],\r\n          value: anotherValue\r\n        }\r\n      }\r\n    // изменение валюты у определеннго поля\r\n    case `SET_CURRENCY`:\r\n      return {\r\n          ...state,\r\n          [action.payload.type]: {\r\n            ...state[action.payload.type],\r\n            currency: action.payload.value\r\n          }\r\n        }\r\n    // изменить статус активности у определенного списка\r\n    case `SET_LIST_STATUS`:\r\n      return {\r\n        ...state,\r\n        listsStatus:{\r\n          ...state.listsStatus,\r\n          ...action.payload\r\n        }\r\n      }\r\n    // установить error\r\n    case `SET_CONVERTER_ERROR`:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default updateConverter;","const initialState = {\r\n  values:{},\r\n  currentCurrency: `USD`,\r\n  dataType: `currency-table-item`,\r\n  activeStatus: false,\r\n  isLoading: true,\r\n  error: {\r\n    status: false,\r\n    message: null\r\n  }\r\n}\r\n\r\nconst updateCurrenciesTable = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // добавить значения валют\r\n    case `ADD_CURRENCIES_VALUES`:\r\n      return {\r\n        ...state,\r\n        values: action.payload\r\n      }\r\n    // установить валюту\r\n    case `SET_CURRENCY_IN_TABLE`:\r\n      return {\r\n        ...state,\r\n        currentCurrency: action.payload\r\n      }\r\n    // назначить activeStatus/isLoading/error\r\n    case `SET_TABLE_STATUSES`:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default updateCurrenciesTable;","import updateConverter from \"./converter\";\r\nimport updateCurrenciesTable from \"./currencies-table\";\r\n\r\nconst initialState = {\r\n  currencyList: [\r\n    `RUB`,\r\n    `USD`,\r\n    `EUR`,\r\n    `GBP`,\r\n    `BYN`\r\n  ],\r\n};\r\n\r\nconst reducer = (state = initialState, action) =>\r\n  ({\r\n    ...state,\r\n    converter: updateConverter(state.converter, action),\r\n    currenciesTable: updateCurrenciesTable(state.currenciesTable, action)\r\n  });\r\n\r\nexport default reducer;","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducers\";\r\n\r\nconst middleware = () => (dispatch) => (action) =>{\r\n  console.log(action.type)\r\n  console.log(action.payload)\r\n   return dispatch(action)\r\n}\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk, middleware));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/app/app\";\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App></App>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}